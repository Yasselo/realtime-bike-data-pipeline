version: '3.8'

services:
  zookeeper:
    image: wurstmeister/zookeeper:3.4.6
    ports:
      - "2181:2181"
    networks:
      - bike_network

  kafka:
    image: wurstmeister/kafka:2.13-2.8.1
    ports:
      - "9092:9092"
    environment:
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_CREATE_TOPICS: "velib_stations:1:1"
    depends_on:
      - zookeeper
    networks:
      - bike_network

  spark:
    image: bitnami/spark:3.2.4
    environment:
      - SPARK_MASTER_NAME=spark
      - SPARK_MASTER_PORT=7077
    ports:
      - "8080:8080"     # Spark UI
    depends_on:
      - kafka
    networks:
      - bike_network

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.8.2
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
    ports:
      - "9200:9200"
    networks:
      - bike_network
    healthcheck:
      test: ["CMD-SHELL", "curl -s http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  kibana:
    image: docker.elastic.co/kibana/kibana:8.8.2
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
    networks:
      - bike_network

  bike_pipeline:
    build:
      context: .
    environment:
      KAFKA_BROKER: kafka:9092
      ELASTICSEARCH_HOST: elasticsearch
      SPARK_MASTER: spark://spark:7077
    depends_on:
      - kafka
      - spark
      - elasticsearch
      - kibana
    networks:
      - bike_network
    command: ["bash", "-c", "exec ./start_pipeline.sh"]  # Start the pipeline with exec for better signal handling

networks:
  bike_network:
    driver: bridge
